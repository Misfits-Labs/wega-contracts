/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IWega {
  export type WegaStruct = {
    name: PromiseOrValue<string>;
    currentPlayers: PromiseOrValue<string>[];
    state: PromiseOrValue<BigNumberish>;
  };

  export type WegaStructOutput = [string, string[], number] & {
    name: string;
    currentPlayers: string[];
    state: number;
  };
}

export interface IWegaGameControllerInterface extends utils.Interface {
  functions: {
    "createGame(string,address,uint256)": FunctionFragment;
    "depositOrPlay(bytes32)": FunctionFragment;
    "gameResults(string,bytes32,address)": FunctionFragment;
    "getGame(bytes32)": FunctionFragment;
    "playerScore(string,bytes32,address)": FunctionFragment;
    "players(bytes32)": FunctionFragment;
    "registerGame(string,address,uint256,uint256,uint256)": FunctionFragment;
    "removeGame(string)": FunctionFragment;
    "setDenominator(string,uint256)": FunctionFragment;
    "setMinRounds(string,uint256)": FunctionFragment;
    "setRequiredPlayers(string,uint256)": FunctionFragment;
    "winners(string,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createGame"
      | "depositOrPlay"
      | "gameResults"
      | "getGame"
      | "playerScore"
      | "players"
      | "registerGame"
      | "removeGame"
      | "setDenominator"
      | "setMinRounds"
      | "setRequiredPlayers"
      | "winners"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createGame",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOrPlay",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameResults",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerScore",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerGame",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setDenominator",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinRounds",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRequiredPlayers",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "winners",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOrPlay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDenominator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinRounds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRequiredPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;

  events: {};
}

export interface IWegaGameController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWegaGameControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerGame(
      game: PromiseOrValue<string>,
      gameAddress: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      minRounds: PromiseOrValue<BigNumberish>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setDenominator(
      game: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setMinRounds(
      game: PromiseOrValue<string>,
      newMinRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRequiredPlayers(
      game: PromiseOrValue<string>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createGame(
    name: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    wagerAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOrPlay(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameResults(
    game: PromiseOrValue<string>,
    escrowHash: PromiseOrValue<BytesLike>,
    player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getGame(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  playerScore(
    game: PromiseOrValue<string>,
    escrowHash: PromiseOrValue<BytesLike>,
    player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  players(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerGame(
    game: PromiseOrValue<string>,
    gameAddress: PromiseOrValue<string>,
    denominator: PromiseOrValue<BigNumberish>,
    minRounds: PromiseOrValue<BigNumberish>,
    requiredPlayers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeGame(
    game: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setDenominator(
    game: PromiseOrValue<string>,
    denominator: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setMinRounds(
    game: PromiseOrValue<string>,
    newMinRounds: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRequiredPlayers(
    game: PromiseOrValue<string>,
    requiredPlayers: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winners(
    game: PromiseOrValue<string>,
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IWega.WegaStructOutput>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    registerGame(
      game: PromiseOrValue<string>,
      gameAddress: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      minRounds: PromiseOrValue<BigNumberish>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setDenominator(
      game: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinRounds(
      game: PromiseOrValue<string>,
      newMinRounds: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRequiredPlayers(
      game: PromiseOrValue<string>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {};

  estimateGas: {
    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerGame(
      game: PromiseOrValue<string>,
      gameAddress: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      minRounds: PromiseOrValue<BigNumberish>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setDenominator(
      game: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setMinRounds(
      game: PromiseOrValue<string>,
      newMinRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRequiredPlayers(
      game: PromiseOrValue<string>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerGame(
      game: PromiseOrValue<string>,
      gameAddress: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      minRounds: PromiseOrValue<BigNumberish>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setDenominator(
      game: PromiseOrValue<string>,
      denominator: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setMinRounds(
      game: PromiseOrValue<string>,
      newMinRounds: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRequiredPlayers(
      game: PromiseOrValue<string>,
      requiredPlayers: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
