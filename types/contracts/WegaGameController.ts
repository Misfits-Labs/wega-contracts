/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace IWegaGameController {
  export type GameSettingsStruct = {
    denominator: PromiseOrValue<BigNumberish>;
    minRounds: PromiseOrValue<BigNumberish>;
    requiredPlayers: PromiseOrValue<BigNumberish>;
    proxy: PromiseOrValue<string>;
    randomNumberController: PromiseOrValue<string>;
    name: PromiseOrValue<string>;
  };

  export type GameSettingsStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    string,
    string
  ] & {
    denominator: BigNumber;
    minRounds: BigNumber;
    requiredPlayers: BigNumber;
    proxy: string;
    randomNumberController: string;
    name: string;
  };
}

export declare namespace IWega {
  export type WegaStruct = {
    name: PromiseOrValue<string>;
    currentPlayers: PromiseOrValue<string>[];
    deposited: PromiseOrValue<BigNumberish>;
    state: PromiseOrValue<BigNumberish>;
  };

  export type WegaStructOutput = [string, string[], BigNumber, number] & {
    name: string;
    currentPlayers: string[];
    deposited: BigNumber;
    state: number;
  };
}

export interface WegaGameControllerInterface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "WEGA_PROTOCOL_ADMIN_ROLE()": FunctionFragment;
    "__WegaGameController_init(address,string[],(uint256,uint256,uint256,address,address,string)[])": FunctionFragment;
    "__WegaGameController_init_unchained(address,string[],(uint256,uint256,uint256,address,address,string)[])": FunctionFragment;
    "addWegaProtocolAdmin(address)": FunctionFragment;
    "addWegaProtocolAdmins(address[])": FunctionFragment;
    "closeWegaProtocolAdmin(address)": FunctionFragment;
    "createGame(string,address,uint256,uint256[])": FunctionFragment;
    "depositOrPlay(bytes32,uint256[])": FunctionFragment;
    "depositOrPlay(bytes32,uint256[],uint256[])": FunctionFragment;
    "erc20Escrow()": FunctionFragment;
    "existsGame(string)": FunctionFragment;
    "gameResults(string,bytes32,address)": FunctionFragment;
    "getGame(bytes32)": FunctionFragment;
    "getGameSettings(string)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,string[],(uint256,uint256,uint256,address,address,string)[])": FunctionFragment;
    "isWegaProtocolAdmin(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "playerScore(string,bytes32,address)": FunctionFragment;
    "players(bytes32)": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "randomizer()": FunctionFragment;
    "registerGame((uint256,uint256,uint256,address,address,string))": FunctionFragment;
    "removeGame(string)": FunctionFragment;
    "removeWegaProtocolAdmin(address)": FunctionFragment;
    "removeWegaProtocolAdmins(address[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "renounceWegaProtocolAdmin()": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rotateWegaProtocolAdmin(address)": FunctionFragment;
    "setGameConfiguration((uint256,uint256,uint256,address,address,string))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
    "winners(string,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "WEGA_PROTOCOL_ADMIN_ROLE"
      | "__WegaGameController_init"
      | "__WegaGameController_init_unchained"
      | "addWegaProtocolAdmin"
      | "addWegaProtocolAdmins"
      | "closeWegaProtocolAdmin"
      | "createGame"
      | "depositOrPlay(bytes32,uint256[])"
      | "depositOrPlay(bytes32,uint256[],uint256[])"
      | "erc20Escrow"
      | "existsGame"
      | "gameResults"
      | "getGame"
      | "getGameSettings"
      | "getRoleAdmin"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isWegaProtocolAdmin"
      | "owner"
      | "playerScore"
      | "players"
      | "proxiableUUID"
      | "randomizer"
      | "registerGame"
      | "removeGame"
      | "removeWegaProtocolAdmin"
      | "removeWegaProtocolAdmins"
      | "renounceOwnership"
      | "renounceRole"
      | "renounceWegaProtocolAdmin"
      | "revokeRole"
      | "rotateWegaProtocolAdmin"
      | "setGameConfiguration"
      | "supportsInterface"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "winners"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WEGA_PROTOCOL_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "__WegaGameController_init",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      IWegaGameController.GameSettingsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "__WegaGameController_init_unchained",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      IWegaGameController.GameSettingsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addWegaProtocolAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addWegaProtocolAdmins",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeWegaProtocolAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGame",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOrPlay(bytes32,uint256[])",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOrPlay(bytes32,uint256[],uint256[])",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Escrow",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "existsGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "gameResults",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getGame",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameSettings",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      IWegaGameController.GameSettingsStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isWegaProtocolAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "playerScore",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "players",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "randomizer",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "registerGame",
    values: [IWegaGameController.GameSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGame",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWegaProtocolAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWegaProtocolAdmins",
    values: [PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWegaProtocolAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateWegaProtocolAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setGameConfiguration",
    values: [IWegaGameController.GameSettingsStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "winners",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WEGA_PROTOCOL_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__WegaGameController_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__WegaGameController_init_unchained",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWegaProtocolAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "createGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositOrPlay(bytes32,uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOrPlay(bytes32,uint256[],uint256[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "existsGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "gameResults",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerScore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "players", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "randomizer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "removeGame", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWegaProtocolAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setGameConfiguration",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "winners", data: BytesLike): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "GameCreation(bytes32,uint256,address,string)": EventFragment;
    "GameRegistration(string,address)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "SetGame(string,uint256,uint256,uint256,address,address)": EventFragment;
    "Upgraded(address)": EventFragment;
    "WinnerDeclaration(bytes32,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameRegistration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetGame"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerDeclaration"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface GameCreationEventObject {
  escrowHash: string;
  nonce: BigNumber;
  creator: string;
  name: string;
}
export type GameCreationEvent = TypedEvent<
  [string, BigNumber, string, string],
  GameCreationEventObject
>;

export type GameCreationEventFilter = TypedEventFilter<GameCreationEvent>;

export interface GameRegistrationEventObject {
  name: string;
  gameAddress: string;
}
export type GameRegistrationEvent = TypedEvent<
  [string, string],
  GameRegistrationEventObject
>;

export type GameRegistrationEventFilter =
  TypedEventFilter<GameRegistrationEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface SetGameEventObject {
  name: string;
  denominator: BigNumber;
  minRounds: BigNumber;
  requiredPlayers: BigNumber;
  proxy: string;
  randomNumberController: string;
}
export type SetGameEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, string, string],
  SetGameEventObject
>;

export type SetGameEventFilter = TypedEventFilter<SetGameEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WinnerDeclarationEventObject {
  escrowHash: string;
  winners: string[];
}
export type WinnerDeclarationEvent = TypedEvent<
  [string, string[]],
  WinnerDeclarationEventObject
>;

export type WinnerDeclarationEventFilter =
  TypedEventFilter<WinnerDeclarationEvent>;

export interface WegaGameController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WegaGameControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    WEGA_PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    closeWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositOrPlay(bytes32,uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "depositOrPlay(bytes32,uint256[],uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      playerChoices: PromiseOrValue<BigNumberish>[],
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20Escrow(overrides?: CallOverrides): Promise<[string]>;

    existsGame(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { exists: boolean }>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IWega.WegaStructOutput]>;

    getGameSettings(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [IWegaGameController.GameSettingsStructOutput] & {
        settings: IWegaGameController.GameSettingsStructOutput;
      }
    >;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      erc20EscrowAddress: PromiseOrValue<string>,
      randomNumberController: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    randomizer(overrides?: CallOverrides): Promise<[string]>;

    registerGame(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceWegaProtocolAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rotateWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setGameConfiguration(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  WEGA_PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  __WegaGameController_init(
    erc20EscrowAddress: PromiseOrValue<string>,
    games: PromiseOrValue<string>[],
    gameSettings: IWegaGameController.GameSettingsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __WegaGameController_init_unchained(
    erc20EscrowAddress: PromiseOrValue<string>,
    games: PromiseOrValue<string>[],
    gameSettings: IWegaGameController.GameSettingsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWegaProtocolAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addWegaProtocolAdmins(
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  closeWegaProtocolAdmin(
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGame(
    name: PromiseOrValue<string>,
    tokenAddress: PromiseOrValue<string>,
    wagerAmount: PromiseOrValue<BigNumberish>,
    randomNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositOrPlay(bytes32,uint256[])"(
    escrowHash: PromiseOrValue<BytesLike>,
    randomNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "depositOrPlay(bytes32,uint256[],uint256[])"(
    escrowHash: PromiseOrValue<BytesLike>,
    playerChoices: PromiseOrValue<BigNumberish>[],
    randomNumbers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20Escrow(overrides?: CallOverrides): Promise<string>;

  existsGame(
    game: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  gameResults(
    game: PromiseOrValue<string>,
    escrowHash: PromiseOrValue<BytesLike>,
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  getGame(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IWega.WegaStructOutput>;

  getGameSettings(
    game: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<IWegaGameController.GameSettingsStructOutput>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    erc20EscrowAddress: PromiseOrValue<string>,
    randomNumberController: PromiseOrValue<string>,
    games: PromiseOrValue<string>[],
    gameSettings: IWegaGameController.GameSettingsStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isWegaProtocolAdmin(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  owner(overrides?: CallOverrides): Promise<string>;

  playerScore(
    game: PromiseOrValue<string>,
    escrowHash: PromiseOrValue<BytesLike>,
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  players(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  randomizer(overrides?: CallOverrides): Promise<string>;

  registerGame(
    config: IWegaGameController.GameSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeGame(
    game: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWegaProtocolAdmin(
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeWegaProtocolAdmins(
    accounts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceWegaProtocolAdmin(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rotateWegaProtocolAdmin(
    receiver: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setGameConfiguration(
    config: IWegaGameController.GameSettingsStruct,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  winners(
    game: PromiseOrValue<string>,
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    WEGA_PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    addWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    closeWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "depositOrPlay(bytes32,uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    "depositOrPlay(bytes32,uint256[],uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      playerChoices: PromiseOrValue<BigNumberish>[],
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    erc20Escrow(overrides?: CallOverrides): Promise<string>;

    existsGame(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IWega.WegaStructOutput>;

    getGameSettings(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<IWegaGameController.GameSettingsStructOutput>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      erc20EscrowAddress: PromiseOrValue<string>,
      randomNumberController: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    isWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    owner(overrides?: CallOverrides): Promise<string>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    randomizer(overrides?: CallOverrides): Promise<string>;

    registerGame(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceWegaProtocolAdmin(overrides?: CallOverrides): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rotateWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setGameConfiguration(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string[]>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "GameCreation(bytes32,uint256,address,string)"(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      creator?: null,
      name?: null
    ): GameCreationEventFilter;
    GameCreation(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      nonce?: PromiseOrValue<BigNumberish> | null,
      creator?: null,
      name?: null
    ): GameCreationEventFilter;

    "GameRegistration(string,address)"(
      name?: null,
      gameAddress?: null
    ): GameRegistrationEventFilter;
    GameRegistration(
      name?: null,
      gameAddress?: null
    ): GameRegistrationEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "SetGame(string,uint256,uint256,uint256,address,address)"(
      name?: null,
      denominator?: null,
      minRounds?: null,
      requiredPlayers?: null,
      proxy?: null,
      randomNumberController?: null
    ): SetGameEventFilter;
    SetGame(
      name?: null,
      denominator?: null,
      minRounds?: null,
      requiredPlayers?: null,
      proxy?: null,
      randomNumberController?: null
    ): SetGameEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;

    "WinnerDeclaration(bytes32,address[])"(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      winners?: PromiseOrValue<string>[] | null
    ): WinnerDeclarationEventFilter;
    WinnerDeclaration(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      winners?: PromiseOrValue<string>[] | null
    ): WinnerDeclarationEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    WEGA_PROTOCOL_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    closeWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositOrPlay(bytes32,uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "depositOrPlay(bytes32,uint256[],uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      playerChoices: PromiseOrValue<BigNumberish>[],
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20Escrow(overrides?: CallOverrides): Promise<BigNumber>;

    existsGame(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameSettings(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      erc20EscrowAddress: PromiseOrValue<string>,
      randomNumberController: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    randomizer(overrides?: CallOverrides): Promise<BigNumber>;

    registerGame(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceWegaProtocolAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rotateWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setGameConfiguration(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    WEGA_PROTOCOL_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    closeWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGame(
      name: PromiseOrValue<string>,
      tokenAddress: PromiseOrValue<string>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositOrPlay(bytes32,uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "depositOrPlay(bytes32,uint256[],uint256[])"(
      escrowHash: PromiseOrValue<BytesLike>,
      playerChoices: PromiseOrValue<BigNumberish>[],
      randomNumbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20Escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    existsGame(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    gameResults(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGame(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameSettings(
      game: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      erc20EscrowAddress: PromiseOrValue<string>,
      randomNumberController: PromiseOrValue<string>,
      games: PromiseOrValue<string>[],
      gameSettings: IWegaGameController.GameSettingsStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    playerScore(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    players(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    randomizer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerGame(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeGame(
      game: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWegaProtocolAdmin(
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeWegaProtocolAdmins(
      accounts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceWegaProtocolAdmin(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rotateWegaProtocolAdmin(
      receiver: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setGameConfiguration(
      config: IWegaGameController.GameSettingsStruct,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    winners(
      game: PromiseOrValue<string>,
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
