/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export interface WegaGameControllerInterface extends utils.Interface {
  functions: {
    "__WegaGameController_init(address,address)": FunctionFragment;
    "__WegaGameController_init_unchained(address,address)": FunctionFragment;
    "createGameAndDepositInitialWager(address,uint256,uint256,uint8)": FunctionFragment;
    "depositOrPlay(bytes32)": FunctionFragment;
    "erc20Escrow()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "__WegaGameController_init"
      | "__WegaGameController_init_unchained"
      | "createGameAndDepositInitialWager"
      | "depositOrPlay"
      | "erc20Escrow"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "__WegaGameController_init",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "__WegaGameController_init_unchained",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createGameAndDepositInitialWager",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOrPlay",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "erc20Escrow",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(
    functionFragment: "__WegaGameController_init",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "__WegaGameController_init_unchained",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGameAndDepositInitialWager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositOrPlay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "erc20Escrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "GameCreation(bytes32,address,uint8)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "WinnerDeclaration(bytes32,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GameCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerDeclaration"): EventFragment;
}

export interface GameCreationEventObject {
  escrowHash: string;
  creator: string;
  gameType: number;
}
export type GameCreationEvent = TypedEvent<
  [string, string, number],
  GameCreationEventObject
>;

export type GameCreationEventFilter = TypedEventFilter<GameCreationEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface WinnerDeclarationEventObject {
  escrowHash: string;
  winners: string[];
}
export type WinnerDeclarationEvent = TypedEvent<
  [string, string[]],
  WinnerDeclarationEventObject
>;

export type WinnerDeclarationEventFilter =
  TypedEventFilter<WinnerDeclarationEvent>;

export interface WegaGameController extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WegaGameControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createGameAndDepositInitialWager(
      tokenAddress: PromiseOrValue<string>,
      requiredPlayerNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      gameType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    erc20Escrow(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  __WegaGameController_init(
    erc20EscrowAddress: PromiseOrValue<string>,
    chanceContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  __WegaGameController_init_unchained(
    erc20EscrowAddress: PromiseOrValue<string>,
    chanceContract: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createGameAndDepositInitialWager(
    tokenAddress: PromiseOrValue<string>,
    requiredPlayerNum: PromiseOrValue<BigNumberish>,
    wagerAmount: PromiseOrValue<BigNumberish>,
    gameType: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOrPlay(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  erc20Escrow(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    createGameAndDepositInitialWager(
      tokenAddress: PromiseOrValue<string>,
      requiredPlayerNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      gameType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    erc20Escrow(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GameCreation(bytes32,address,uint8)"(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      creator?: null,
      gameType?: null
    ): GameCreationEventFilter;
    GameCreation(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      creator?: null,
      gameType?: null
    ): GameCreationEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "WinnerDeclaration(bytes32,address[])"(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      winners?: PromiseOrValue<string>[] | null
    ): WinnerDeclarationEventFilter;
    WinnerDeclaration(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      winners?: PromiseOrValue<string>[] | null
    ): WinnerDeclarationEventFilter;
  };

  estimateGas: {
    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createGameAndDepositInitialWager(
      tokenAddress: PromiseOrValue<string>,
      requiredPlayerNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      gameType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    erc20Escrow(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    __WegaGameController_init(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    __WegaGameController_init_unchained(
      erc20EscrowAddress: PromiseOrValue<string>,
      chanceContract: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createGameAndDepositInitialWager(
      tokenAddress: PromiseOrValue<string>,
      requiredPlayerNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      gameType: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOrPlay(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    erc20Escrow(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
