/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEscrow {
  export type ERC20WagerRequestStruct = {
    state: BigNumberish;
    escrowHash: BytesLike;
    wagerAmount: BigNumberish;
    tokenAddress: AddressLike;
    totalWager: BigNumberish;
    nonce: BigNumberish;
  };

  export type ERC20WagerRequestStructOutput = [
    state: bigint,
    escrowHash: string,
    wagerAmount: bigint,
    tokenAddress: string,
    totalWager: bigint,
    nonce: bigint
  ] & {
    state: bigint;
    escrowHash: string;
    wagerAmount: bigint;
    tokenAddress: string;
    totalWager: bigint;
    nonce: bigint;
  };
}

export interface IWegaERC20EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "containsPlayer"
      | "createWagerRequest"
      | "deposit"
      | "depositOf"
      | "getWagerRequest"
      | "getWagerRequests"
      | "hash"
      | "setFeeManager"
      | "setWithdrawers"
      | "wagerBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "containsPlayer",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWagerRequest",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawers",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "wagerBalance",
    values: [BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "containsPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wagerBalance",
    data: BytesLike
  ): Result;
}

export interface IWegaERC20Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): IWegaERC20Escrow;
  waitForDeployment(): Promise<this>;

  interface: IWegaERC20EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  containsPlayer: TypedContractMethod<
    [escrowHash: BytesLike, player: AddressLike],
    [boolean],
    "view"
  >;

  createWagerRequest: TypedContractMethod<
    [
      token: AddressLike,
      creator: AddressLike,
      requiredAccountNum: BigNumberish,
      wagerAmount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositOf: TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike],
    [bigint],
    "nonpayable"
  >;

  getWagerRequest: TypedContractMethod<
    [escrowHash: BytesLike],
    [IEscrow.ERC20WagerRequestStructOutput],
    "view"
  >;

  getWagerRequests: TypedContractMethod<
    [],
    [IEscrow.ERC20WagerRequestStructOutput[]],
    "view"
  >;

  hash: TypedContractMethod<
    [
      token: AddressLike,
      creator: AddressLike,
      requiredAccountNum: BigNumberish,
      wagerAmount: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "view"
  >;

  setFeeManager: TypedContractMethod<
    [feeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawers: TypedContractMethod<
    [escrowHash: BytesLike, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;

  wagerBalance: TypedContractMethod<[escrowHash: BytesLike], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "containsPlayer"
  ): TypedContractMethod<
    [escrowHash: BytesLike, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createWagerRequest"
  ): TypedContractMethod<
    [
      token: AddressLike,
      creator: AddressLike,
      requiredAccountNum: BigNumberish,
      wagerAmount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike, amount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositOf"
  ): TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getWagerRequest"
  ): TypedContractMethod<
    [escrowHash: BytesLike],
    [IEscrow.ERC20WagerRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWagerRequests"
  ): TypedContractMethod<[], [IEscrow.ERC20WagerRequestStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<
    [
      token: AddressLike,
      creator: AddressLike,
      requiredAccountNum: BigNumberish,
      wagerAmount: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "setFeeManager"
  ): TypedContractMethod<[feeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawers"
  ): TypedContractMethod<
    [escrowHash: BytesLike, winners: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "wagerBalance"
  ): TypedContractMethod<[escrowHash: BytesLike], [bigint], "view">;

  filters: {};
}
