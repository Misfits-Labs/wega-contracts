/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IEscrow {
  export type ERC20WagerRequestStruct = {
    state: PromiseOrValue<BigNumberish>;
    escrowHash: PromiseOrValue<BytesLike>;
    wagerAmount: PromiseOrValue<BigNumberish>;
    tokenAddress: PromiseOrValue<string>;
    totalWager: PromiseOrValue<BigNumberish>;
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type ERC20WagerRequestStructOutput = [
    number,
    string,
    BigNumber,
    string,
    BigNumber,
    BigNumber
  ] & {
    state: number;
    escrowHash: string;
    wagerAmount: BigNumber;
    tokenAddress: string;
    totalWager: BigNumber;
    nonce: BigNumber;
  };
}

export interface IWegaERC20EscrowInterface extends utils.Interface {
  functions: {
    "containsPlayer(bytes32,address)": FunctionFragment;
    "createWagerRequest(address,address,uint256,uint256)": FunctionFragment;
    "currentNonce(address)": FunctionFragment;
    "deposit(bytes32,address,uint256)": FunctionFragment;
    "depositOf(bytes32,address)": FunctionFragment;
    "getWagerRequest(bytes32)": FunctionFragment;
    "getWagerRequests()": FunctionFragment;
    "hash(address,address,uint256,uint256,uint256)": FunctionFragment;
    "setWithdrawers(bytes32,address[])": FunctionFragment;
    "wagerBalance(bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "containsPlayer"
      | "createWagerRequest"
      | "currentNonce"
      | "deposit"
      | "depositOf"
      | "getWagerRequest"
      | "getWagerRequests"
      | "hash"
      | "setWithdrawers"
      | "wagerBalance"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "containsPlayer",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "createWagerRequest",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawers",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "wagerBalance",
    values: [PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "containsPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wagerBalance",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IWegaERC20Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWegaERC20EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    containsPlayer(
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    createWagerRequest(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    deposit(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    depositOf(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getWagerRequest(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IEscrow.ERC20WagerRequestStructOutput]>;

    getWagerRequests(
      overrides?: CallOverrides
    ): Promise<[IEscrow.ERC20WagerRequestStructOutput[]]>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { escrowHash_: string }>;

    setWithdrawers(
      escrowHash: PromiseOrValue<BytesLike>,
      winners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    wagerBalance(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  containsPlayer(
    escrowHash: PromiseOrValue<BytesLike>,
    player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  createWagerRequest(
    token: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    requiredAccountNum: PromiseOrValue<BigNumberish>,
    wagerAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentNonce(
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  deposit(
    escrowHash: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  depositOf(
    escrowHash: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getWagerRequest(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IEscrow.ERC20WagerRequestStructOutput>;

  getWagerRequests(
    overrides?: CallOverrides
  ): Promise<IEscrow.ERC20WagerRequestStructOutput[]>;

  hash(
    token: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    requiredAccountNum: PromiseOrValue<BigNumberish>,
    wagerAmount: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  setWithdrawers(
    escrowHash: PromiseOrValue<BytesLike>,
    winners: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  wagerBalance(
    escrowHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    containsPlayer(
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    createWagerRequest(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    currentNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    depositOf(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWagerRequest(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IEscrow.ERC20WagerRequestStructOutput>;

    getWagerRequests(
      overrides?: CallOverrides
    ): Promise<IEscrow.ERC20WagerRequestStructOutput[]>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    setWithdrawers(
      escrowHash: PromiseOrValue<BytesLike>,
      winners: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    wagerBalance(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    containsPlayer(
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    createWagerRequest(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deposit(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    depositOf(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getWagerRequest(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWagerRequests(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setWithdrawers(
      escrowHash: PromiseOrValue<BytesLike>,
      winners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    wagerBalance(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    containsPlayer(
      escrowHash: PromiseOrValue<BytesLike>,
      player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWagerRequest(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentNonce(
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    depositOf(
      escrowHash: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getWagerRequest(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWagerRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      requiredAccountNum: PromiseOrValue<BigNumberish>,
      wagerAmount: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setWithdrawers(
      escrowHash: PromiseOrValue<BytesLike>,
      winners: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    wagerBalance(
      escrowHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
