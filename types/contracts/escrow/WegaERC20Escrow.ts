/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace IWegaERC20Escrow {
  export type ERC20WagerRequestStruct = {
    state: PromiseOrValue<BigNumberish>;
    escrowId: PromiseOrValue<BytesLike>;
    wager: PromiseOrValue<BigNumberish>;
    token: PromiseOrValue<string>;
    accounts: PromiseOrValue<string>[];
    nonce: PromiseOrValue<BigNumberish>;
  };

  export type ERC20WagerRequestStructOutput = [
    number,
    string,
    BigNumber,
    string,
    string[],
    BigNumber
  ] & {
    state: number;
    escrowId: string;
    wager: BigNumber;
    token: string;
    accounts: string[];
    nonce: BigNumber;
  };
}

export interface WegaERC20EscrowInterface extends utils.Interface {
  functions: {
    "NAME()": FunctionFragment;
    "TYPE()": FunctionFragment;
    "VERSION()": FunctionFragment;
    "createWagerAndDeposit(address,address,uint256,uint256)": FunctionFragment;
    "currentNonce()": FunctionFragment;
    "getWagerRequest(bytes32)": FunctionFragment;
    "getWagerRequests()": FunctionFragment;
    "hash(address,address,uint256,uint256)": FunctionFragment;
    "isTrustedForwarder(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "NAME"
      | "TYPE"
      | "VERSION"
      | "createWagerAndDeposit"
      | "currentNonce"
      | "getWagerRequest"
      | "getWagerRequests"
      | "hash"
      | "isTrustedForwarder"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "TYPE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createWagerAndDeposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequest",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isTrustedForwarder",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TYPE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createWagerAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isTrustedForwarder",
    data: BytesLike
  ): Result;

  events: {
    "WagerRequestCreation(bytes32,address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "WagerRequestCreation"): EventFragment;
}

export interface WagerRequestCreationEventObject {
  escrowId: string;
  token: string;
  creator: string;
}
export type WagerRequestCreationEvent = TypedEvent<
  [string, string, string],
  WagerRequestCreationEventObject
>;

export type WagerRequestCreationEventFilter =
  TypedEventFilter<WagerRequestCreationEvent>;

export interface WegaERC20Escrow extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WegaERC20EscrowInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    NAME(overrides?: CallOverrides): Promise<[string]>;

    TYPE(overrides?: CallOverrides): Promise<[string]>;

    VERSION(overrides?: CallOverrides): Promise<[string]>;

    createWagerAndDeposit(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      wager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    currentNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    getWagerRequest(
      escrowId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[IWegaERC20Escrow.ERC20WagerRequestStructOutput]>;

    getWagerRequests(
      overrides?: CallOverrides
    ): Promise<[IWegaERC20Escrow.ERC20WagerRequestStructOutput[]]>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      wager: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { escrowId_: string }>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  NAME(overrides?: CallOverrides): Promise<string>;

  TYPE(overrides?: CallOverrides): Promise<string>;

  VERSION(overrides?: CallOverrides): Promise<string>;

  createWagerAndDeposit(
    token: PromiseOrValue<string>,
    account: PromiseOrValue<string>,
    deposit: PromiseOrValue<BigNumberish>,
    wager: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

  getWagerRequest(
    escrowId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<IWegaERC20Escrow.ERC20WagerRequestStructOutput>;

  getWagerRequests(
    overrides?: CallOverrides
  ): Promise<IWegaERC20Escrow.ERC20WagerRequestStructOutput[]>;

  hash(
    token: PromiseOrValue<string>,
    creator: PromiseOrValue<string>,
    wager: PromiseOrValue<BigNumberish>,
    nonce: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isTrustedForwarder(
    forwarder: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    NAME(overrides?: CallOverrides): Promise<string>;

    TYPE(overrides?: CallOverrides): Promise<string>;

    VERSION(overrides?: CallOverrides): Promise<string>;

    createWagerAndDeposit(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      wager: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getWagerRequest(
      escrowId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<IWegaERC20Escrow.ERC20WagerRequestStructOutput>;

    getWagerRequests(
      overrides?: CallOverrides
    ): Promise<IWegaERC20Escrow.ERC20WagerRequestStructOutput[]>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      wager: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "WagerRequestCreation(bytes32,address,address)"(
      escrowId?: PromiseOrValue<BytesLike> | null,
      token?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): WagerRequestCreationEventFilter;
    WagerRequestCreation(
      escrowId?: PromiseOrValue<BytesLike> | null,
      token?: PromiseOrValue<string> | null,
      creator?: PromiseOrValue<string> | null
    ): WagerRequestCreationEventFilter;
  };

  estimateGas: {
    NAME(overrides?: CallOverrides): Promise<BigNumber>;

    TYPE(overrides?: CallOverrides): Promise<BigNumber>;

    VERSION(overrides?: CallOverrides): Promise<BigNumber>;

    createWagerAndDeposit(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      wager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    getWagerRequest(
      escrowId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWagerRequests(overrides?: CallOverrides): Promise<BigNumber>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      wager: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    NAME(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TYPE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    VERSION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createWagerAndDeposit(
      token: PromiseOrValue<string>,
      account: PromiseOrValue<string>,
      deposit: PromiseOrValue<BigNumberish>,
      wager: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    currentNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getWagerRequest(
      escrowId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWagerRequests(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hash(
      token: PromiseOrValue<string>,
      creator: PromiseOrValue<string>,
      wager: PromiseOrValue<BigNumberish>,
      nonce: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isTrustedForwarder(
      forwarder: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
