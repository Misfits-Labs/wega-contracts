/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace IEscrow {
  export type ERC20WagerRequestStruct = {
    state: BigNumberish;
    escrowHash: BytesLike;
    wagerAmount: BigNumberish;
    tokenAddress: AddressLike;
    totalWager: BigNumberish;
    nonce: BigNumberish;
  };

  export type ERC20WagerRequestStructOutput = [
    state: bigint,
    escrowHash: string,
    wagerAmount: bigint,
    tokenAddress: string,
    totalWager: bigint,
    nonce: bigint
  ] & {
    state: bigint;
    escrowHash: string;
    wagerAmount: bigint;
    tokenAddress: string;
    totalWager: bigint;
    nonce: bigint;
  };
}

export interface WegaERC20EscrowInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "APPLY_FEES"
      | "DEFAULT_ADMIN_ROLE"
      | "GAME_CONTROLLER_ROLE"
      | "NAME"
      | "TYPE"
      | "VERSION"
      | "WEGA_PROTOCOL_ADMIN_ROLE"
      | "addWegaProtocolAdmin"
      | "addWegaProtocolAdmins"
      | "closeWegaProtocolAdmin"
      | "containsPlayer"
      | "createWagerRequest"
      | "currentNonce"
      | "deposit"
      | "depositOf"
      | "getRoleAdmin"
      | "getWagerRequest"
      | "getWagerRequests"
      | "grantRole"
      | "hasRole"
      | "hash"
      | "initialize"
      | "isWegaProtocolAdmin"
      | "owner"
      | "proxiableUUID"
      | "removeWegaProtocolAdmin"
      | "removeWegaProtocolAdmins"
      | "renounceOwnership"
      | "renounceRole"
      | "renounceWegaProtocolAdmin"
      | "revokeRole"
      | "rotateWegaProtocolAdmin"
      | "setFeeManager"
      | "setWithdrawers"
      | "supportsInterface"
      | "toggleFees"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "wagerBalance"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "ApplyFees"
      | "BeaconUpgraded"
      | "Initialized"
      | "OwnershipTransferred"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "SetFeeManager"
      | "SetGameControler"
      | "SetWithdrawers"
      | "Upgraded"
      | "WagerDeposit"
      | "WagerRequestCreation"
      | "WagerWithdrawal"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "APPLY_FEES",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GAME_CONTROLLER_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "NAME", values?: undefined): string;
  encodeFunctionData(functionFragment: "TYPE", values?: undefined): string;
  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "WEGA_PROTOCOL_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addWegaProtocolAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addWegaProtocolAdmins",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "closeWegaProtocolAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "containsPlayer",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "createWagerRequest",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [BytesLike, AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "depositOf",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequest",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWagerRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hash",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isWegaProtocolAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeWegaProtocolAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWegaProtocolAdmins",
    values: [AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceWegaProtocolAdmin",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "rotateWegaProtocolAdmin",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeManager",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setWithdrawers",
    values: [BytesLike, AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "toggleFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "wagerBalance",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: "APPLY_FEES", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GAME_CONTROLLER_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "NAME", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "TYPE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "WEGA_PROTOCOL_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addWegaProtocolAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "closeWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "containsPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "depositOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequest",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWagerRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWegaProtocolAdmins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rotateWegaProtocolAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWithdrawers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "toggleFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "wagerBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ApplyFeesEvent {
  export type InputTuple = [areFeesApplied: boolean];
  export type OutputTuple = [areFeesApplied: boolean];
  export interface OutputObject {
    areFeesApplied: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeManagerEvent {
  export type InputTuple = [feeManager: AddressLike];
  export type OutputTuple = [feeManager: string];
  export interface OutputObject {
    feeManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGameControlerEvent {
  export type InputTuple = [gameController: AddressLike];
  export type OutputTuple = [gameController: string];
  export interface OutputObject {
    gameController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawersEvent {
  export type InputTuple = [escrowId: BytesLike, withdrawers: AddressLike[]];
  export type OutputTuple = [escrowId: string, withdrawers: string[]];
  export interface OutputObject {
    escrowId: string;
    withdrawers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WagerDepositEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    wager: BigNumberish,
    player: AddressLike
  ];
  export type OutputTuple = [escrowId: string, wager: bigint, player: string];
  export interface OutputObject {
    escrowId: string;
    wager: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WagerRequestCreationEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    token: AddressLike,
    creator: AddressLike,
    wager: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    token: string,
    creator: string,
    wager: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    token: string;
    creator: string;
    wager: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WagerWithdrawalEvent {
  export type InputTuple = [
    escrowHash: BytesLike,
    transferAmount: BigNumberish,
    winner: AddressLike
  ];
  export type OutputTuple = [
    escrowHash: string,
    transferAmount: bigint,
    winner: string
  ];
  export interface OutputObject {
    escrowHash: string;
    transferAmount: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface WegaERC20Escrow extends BaseContract {
  connect(runner?: ContractRunner | null): WegaERC20Escrow;
  waitForDeployment(): Promise<this>;

  interface: WegaERC20EscrowInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  APPLY_FEES: TypedContractMethod<[], [boolean], "view">;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  GAME_CONTROLLER_ROLE: TypedContractMethod<[], [string], "view">;

  NAME: TypedContractMethod<[], [string], "view">;

  TYPE: TypedContractMethod<[], [string], "view">;

  VERSION: TypedContractMethod<[], [string], "view">;

  WEGA_PROTOCOL_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  addWegaProtocolAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  addWegaProtocolAdmins: TypedContractMethod<
    [accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  closeWegaProtocolAdmin: TypedContractMethod<
    [receiver: AddressLike],
    [void],
    "payable"
  >;

  containsPlayer: TypedContractMethod<
    [escrowHash: BytesLike, player: AddressLike],
    [boolean],
    "view"
  >;

  createWagerRequest: TypedContractMethod<
    [
      tokenAddress: AddressLike,
      account: AddressLike,
      requiredPlayerNum: BigNumberish,
      wagerAmount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;

  currentNonce: TypedContractMethod<[account: AddressLike], [bigint], "view">;

  deposit: TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike, wagerAmount: BigNumberish],
    [void],
    "nonpayable"
  >;

  depositOf: TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getWagerRequest: TypedContractMethod<
    [escrowHash: BytesLike],
    [IEscrow.ERC20WagerRequestStructOutput],
    "view"
  >;

  getWagerRequests: TypedContractMethod<
    [],
    [IEscrow.ERC20WagerRequestStructOutput[]],
    "view"
  >;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  hash: TypedContractMethod<
    [
      token: AddressLike,
      creator: AddressLike,
      requiredPlayerNum: BigNumberish,
      wager: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "view"
  >;

  initialize: TypedContractMethod<
    [feeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  isWegaProtocolAdmin: TypedContractMethod<
    [account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  removeWegaProtocolAdmin: TypedContractMethod<
    [account: AddressLike],
    [void],
    "nonpayable"
  >;

  removeWegaProtocolAdmins: TypedContractMethod<
    [accounts: AddressLike[]],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceWegaProtocolAdmin: TypedContractMethod<[], [void], "nonpayable">;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  rotateWegaProtocolAdmin: TypedContractMethod<
    [receiver: AddressLike],
    [void],
    "payable"
  >;

  setFeeManager: TypedContractMethod<
    [feeManager: AddressLike],
    [void],
    "nonpayable"
  >;

  setWithdrawers: TypedContractMethod<
    [escrowHash: BytesLike, winners_: AddressLike[]],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  toggleFees: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  wagerBalance: TypedContractMethod<[escrowHash: BytesLike], [bigint], "view">;

  withdraw: TypedContractMethod<[escrowHash: BytesLike], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "APPLY_FEES"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "GAME_CONTROLLER_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "NAME"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "TYPE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "WEGA_PROTOCOL_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addWegaProtocolAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addWegaProtocolAdmins"
  ): TypedContractMethod<[accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "closeWegaProtocolAdmin"
  ): TypedContractMethod<[receiver: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "containsPlayer"
  ): TypedContractMethod<
    [escrowHash: BytesLike, player: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "createWagerRequest"
  ): TypedContractMethod<
    [
      tokenAddress: AddressLike,
      account: AddressLike,
      requiredPlayerNum: BigNumberish,
      wagerAmount: BigNumberish
    ],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "currentNonce"
  ): TypedContractMethod<[account: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike, wagerAmount: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "depositOf"
  ): TypedContractMethod<
    [escrowHash: BytesLike, account: AddressLike],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWagerRequest"
  ): TypedContractMethod<
    [escrowHash: BytesLike],
    [IEscrow.ERC20WagerRequestStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWagerRequests"
  ): TypedContractMethod<[], [IEscrow.ERC20WagerRequestStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "hash"
  ): TypedContractMethod<
    [
      token: AddressLike,
      creator: AddressLike,
      requiredPlayerNum: BigNumberish,
      wager: BigNumberish,
      nonce: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[feeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isWegaProtocolAdmin"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "removeWegaProtocolAdmin"
  ): TypedContractMethod<[account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeWegaProtocolAdmins"
  ): TypedContractMethod<[accounts: AddressLike[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceWegaProtocolAdmin"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "rotateWegaProtocolAdmin"
  ): TypedContractMethod<[receiver: AddressLike], [void], "payable">;
  getFunction(
    nameOrSignature: "setFeeManager"
  ): TypedContractMethod<[feeManager: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setWithdrawers"
  ): TypedContractMethod<
    [escrowHash: BytesLike, winners_: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "toggleFees"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "wagerBalance"
  ): TypedContractMethod<[escrowHash: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<[escrowHash: BytesLike], [void], "nonpayable">;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "ApplyFees"
  ): TypedContractEvent<
    ApplyFeesEvent.InputTuple,
    ApplyFeesEvent.OutputTuple,
    ApplyFeesEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeManager"
  ): TypedContractEvent<
    SetFeeManagerEvent.InputTuple,
    SetFeeManagerEvent.OutputTuple,
    SetFeeManagerEvent.OutputObject
  >;
  getEvent(
    key: "SetGameControler"
  ): TypedContractEvent<
    SetGameControlerEvent.InputTuple,
    SetGameControlerEvent.OutputTuple,
    SetGameControlerEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawers"
  ): TypedContractEvent<
    SetWithdrawersEvent.InputTuple,
    SetWithdrawersEvent.OutputTuple,
    SetWithdrawersEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "WagerDeposit"
  ): TypedContractEvent<
    WagerDepositEvent.InputTuple,
    WagerDepositEvent.OutputTuple,
    WagerDepositEvent.OutputObject
  >;
  getEvent(
    key: "WagerRequestCreation"
  ): TypedContractEvent<
    WagerRequestCreationEvent.InputTuple,
    WagerRequestCreationEvent.OutputTuple,
    WagerRequestCreationEvent.OutputObject
  >;
  getEvent(
    key: "WagerWithdrawal"
  ): TypedContractEvent<
    WagerWithdrawalEvent.InputTuple,
    WagerWithdrawalEvent.OutputTuple,
    WagerWithdrawalEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "ApplyFees(bool)": TypedContractEvent<
      ApplyFeesEvent.InputTuple,
      ApplyFeesEvent.OutputTuple,
      ApplyFeesEvent.OutputObject
    >;
    ApplyFees: TypedContractEvent<
      ApplyFeesEvent.InputTuple,
      ApplyFeesEvent.OutputTuple,
      ApplyFeesEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "SetFeeManager(address)": TypedContractEvent<
      SetFeeManagerEvent.InputTuple,
      SetFeeManagerEvent.OutputTuple,
      SetFeeManagerEvent.OutputObject
    >;
    SetFeeManager: TypedContractEvent<
      SetFeeManagerEvent.InputTuple,
      SetFeeManagerEvent.OutputTuple,
      SetFeeManagerEvent.OutputObject
    >;

    "SetGameControler(address)": TypedContractEvent<
      SetGameControlerEvent.InputTuple,
      SetGameControlerEvent.OutputTuple,
      SetGameControlerEvent.OutputObject
    >;
    SetGameControler: TypedContractEvent<
      SetGameControlerEvent.InputTuple,
      SetGameControlerEvent.OutputTuple,
      SetGameControlerEvent.OutputObject
    >;

    "SetWithdrawers(bytes32,address[])": TypedContractEvent<
      SetWithdrawersEvent.InputTuple,
      SetWithdrawersEvent.OutputTuple,
      SetWithdrawersEvent.OutputObject
    >;
    SetWithdrawers: TypedContractEvent<
      SetWithdrawersEvent.InputTuple,
      SetWithdrawersEvent.OutputTuple,
      SetWithdrawersEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "WagerDeposit(bytes32,uint256,address)": TypedContractEvent<
      WagerDepositEvent.InputTuple,
      WagerDepositEvent.OutputTuple,
      WagerDepositEvent.OutputObject
    >;
    WagerDeposit: TypedContractEvent<
      WagerDepositEvent.InputTuple,
      WagerDepositEvent.OutputTuple,
      WagerDepositEvent.OutputObject
    >;

    "WagerRequestCreation(bytes32,address,address,uint256)": TypedContractEvent<
      WagerRequestCreationEvent.InputTuple,
      WagerRequestCreationEvent.OutputTuple,
      WagerRequestCreationEvent.OutputObject
    >;
    WagerRequestCreation: TypedContractEvent<
      WagerRequestCreationEvent.InputTuple,
      WagerRequestCreationEvent.OutputTuple,
      WagerRequestCreationEvent.OutputObject
    >;

    "WagerWithdrawal(bytes32,uint256,address)": TypedContractEvent<
      WagerWithdrawalEvent.InputTuple,
      WagerWithdrawalEvent.OutputTuple,
      WagerWithdrawalEvent.OutputObject
    >;
    WagerWithdrawal: TypedContractEvent<
      WagerWithdrawalEvent.InputTuple,
      WagerWithdrawalEvent.OutputTuple,
      WagerWithdrawalEvent.OutputObject
    >;
  };
}
