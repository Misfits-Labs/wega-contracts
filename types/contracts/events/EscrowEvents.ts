/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  Signer,
  utils,
} from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface EscrowEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "Approval(bytes32)": EventFragment;
    "Deposit(bytes32,address,uint256)": EventFragment;
    "RequestCancelation(bytes32,address)": EventFragment;
    "RequestCreation(bytes32,address,uint256)": EventFragment;
    "Withdrawal(bytes32,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestCancelation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface ApprovalEventObject {
  transferId: string;
}
export type ApprovalEvent = TypedEvent<[string], ApprovalEventObject>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface DepositEventObject {
  transferId: string;
  depositer: string;
  tokenId: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface RequestCancelationEventObject {
  transferId: string;
  canceler: string;
}
export type RequestCancelationEvent = TypedEvent<
  [string, string],
  RequestCancelationEventObject
>;

export type RequestCancelationEventFilter =
  TypedEventFilter<RequestCancelationEvent>;

export interface RequestCreationEventObject {
  transferId: string;
  nftAgainst: string;
  tokenId: BigNumber;
}
export type RequestCreationEvent = TypedEvent<
  [string, string, BigNumber],
  RequestCreationEventObject
>;

export type RequestCreationEventFilter = TypedEventFilter<RequestCreationEvent>;

export interface WithdrawalEventObject {
  transferId: string;
  withdrawer: string;
  tokenId: BigNumber;
}
export type WithdrawalEvent = TypedEvent<
  [string, string, BigNumber],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface EscrowEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EscrowEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Approval(bytes32)"(
      transferId?: PromiseOrValue<BytesLike> | null
    ): ApprovalEventFilter;
    Approval(
      transferId?: PromiseOrValue<BytesLike> | null
    ): ApprovalEventFilter;

    "Deposit(bytes32,address,uint256)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      depositer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;
    Deposit(
      transferId?: PromiseOrValue<BytesLike> | null,
      depositer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): DepositEventFilter;

    "RequestCancelation(bytes32,address)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      canceler?: PromiseOrValue<string> | null
    ): RequestCancelationEventFilter;
    RequestCancelation(
      transferId?: PromiseOrValue<BytesLike> | null,
      canceler?: PromiseOrValue<string> | null
    ): RequestCancelationEventFilter;

    "RequestCreation(bytes32,address,uint256)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      nftAgainst?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): RequestCreationEventFilter;
    RequestCreation(
      transferId?: PromiseOrValue<BytesLike> | null,
      nftAgainst?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): RequestCreationEventFilter;

    "Withdrawal(bytes32,address,uint256)"(
      transferId?: PromiseOrValue<BytesLike> | null,
      withdrawer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalEventFilter;
    Withdrawal(
      transferId?: PromiseOrValue<BytesLike> | null,
      withdrawer?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): WithdrawalEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
