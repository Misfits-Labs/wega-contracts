/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IERC20EscrowEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "ApplyFees"
      | "SetFeeManager"
      | "SetGameControler"
      | "SetWithdrawers"
      | "WagerDeposit"
      | "WagerRequestCreation"
      | "WagerWithdrawal"
  ): EventFragment;
}

export namespace ApplyFeesEvent {
  export type InputTuple = [areFeesApplied: boolean];
  export type OutputTuple = [areFeesApplied: boolean];
  export interface OutputObject {
    areFeesApplied: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetFeeManagerEvent {
  export type InputTuple = [feeManager: AddressLike];
  export type OutputTuple = [feeManager: string];
  export interface OutputObject {
    feeManager: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGameControlerEvent {
  export type InputTuple = [gameController: AddressLike];
  export type OutputTuple = [gameController: string];
  export interface OutputObject {
    gameController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetWithdrawersEvent {
  export type InputTuple = [escrowId: BytesLike, withdrawers: AddressLike[]];
  export type OutputTuple = [escrowId: string, withdrawers: string[]];
  export interface OutputObject {
    escrowId: string;
    withdrawers: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WagerDepositEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    wager: BigNumberish,
    player: AddressLike
  ];
  export type OutputTuple = [escrowId: string, wager: bigint, player: string];
  export interface OutputObject {
    escrowId: string;
    wager: bigint;
    player: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WagerRequestCreationEvent {
  export type InputTuple = [
    escrowId: BytesLike,
    token: AddressLike,
    creator: AddressLike,
    wager: BigNumberish
  ];
  export type OutputTuple = [
    escrowId: string,
    token: string,
    creator: string,
    wager: bigint
  ];
  export interface OutputObject {
    escrowId: string;
    token: string;
    creator: string;
    wager: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WagerWithdrawalEvent {
  export type InputTuple = [
    escrowHash: BytesLike,
    transferAmount: BigNumberish,
    winner: AddressLike
  ];
  export type OutputTuple = [
    escrowHash: string,
    transferAmount: bigint,
    winner: string
  ];
  export interface OutputObject {
    escrowHash: string;
    transferAmount: bigint;
    winner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IERC20EscrowEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IERC20EscrowEvents;
  waitForDeployment(): Promise<this>;

  interface: IERC20EscrowEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "ApplyFees"
  ): TypedContractEvent<
    ApplyFeesEvent.InputTuple,
    ApplyFeesEvent.OutputTuple,
    ApplyFeesEvent.OutputObject
  >;
  getEvent(
    key: "SetFeeManager"
  ): TypedContractEvent<
    SetFeeManagerEvent.InputTuple,
    SetFeeManagerEvent.OutputTuple,
    SetFeeManagerEvent.OutputObject
  >;
  getEvent(
    key: "SetGameControler"
  ): TypedContractEvent<
    SetGameControlerEvent.InputTuple,
    SetGameControlerEvent.OutputTuple,
    SetGameControlerEvent.OutputObject
  >;
  getEvent(
    key: "SetWithdrawers"
  ): TypedContractEvent<
    SetWithdrawersEvent.InputTuple,
    SetWithdrawersEvent.OutputTuple,
    SetWithdrawersEvent.OutputObject
  >;
  getEvent(
    key: "WagerDeposit"
  ): TypedContractEvent<
    WagerDepositEvent.InputTuple,
    WagerDepositEvent.OutputTuple,
    WagerDepositEvent.OutputObject
  >;
  getEvent(
    key: "WagerRequestCreation"
  ): TypedContractEvent<
    WagerRequestCreationEvent.InputTuple,
    WagerRequestCreationEvent.OutputTuple,
    WagerRequestCreationEvent.OutputObject
  >;
  getEvent(
    key: "WagerWithdrawal"
  ): TypedContractEvent<
    WagerWithdrawalEvent.InputTuple,
    WagerWithdrawalEvent.OutputTuple,
    WagerWithdrawalEvent.OutputObject
  >;

  filters: {
    "ApplyFees(bool)": TypedContractEvent<
      ApplyFeesEvent.InputTuple,
      ApplyFeesEvent.OutputTuple,
      ApplyFeesEvent.OutputObject
    >;
    ApplyFees: TypedContractEvent<
      ApplyFeesEvent.InputTuple,
      ApplyFeesEvent.OutputTuple,
      ApplyFeesEvent.OutputObject
    >;

    "SetFeeManager(address)": TypedContractEvent<
      SetFeeManagerEvent.InputTuple,
      SetFeeManagerEvent.OutputTuple,
      SetFeeManagerEvent.OutputObject
    >;
    SetFeeManager: TypedContractEvent<
      SetFeeManagerEvent.InputTuple,
      SetFeeManagerEvent.OutputTuple,
      SetFeeManagerEvent.OutputObject
    >;

    "SetGameControler(address)": TypedContractEvent<
      SetGameControlerEvent.InputTuple,
      SetGameControlerEvent.OutputTuple,
      SetGameControlerEvent.OutputObject
    >;
    SetGameControler: TypedContractEvent<
      SetGameControlerEvent.InputTuple,
      SetGameControlerEvent.OutputTuple,
      SetGameControlerEvent.OutputObject
    >;

    "SetWithdrawers(bytes32,address[])": TypedContractEvent<
      SetWithdrawersEvent.InputTuple,
      SetWithdrawersEvent.OutputTuple,
      SetWithdrawersEvent.OutputObject
    >;
    SetWithdrawers: TypedContractEvent<
      SetWithdrawersEvent.InputTuple,
      SetWithdrawersEvent.OutputTuple,
      SetWithdrawersEvent.OutputObject
    >;

    "WagerDeposit(bytes32,uint256,address)": TypedContractEvent<
      WagerDepositEvent.InputTuple,
      WagerDepositEvent.OutputTuple,
      WagerDepositEvent.OutputObject
    >;
    WagerDeposit: TypedContractEvent<
      WagerDepositEvent.InputTuple,
      WagerDepositEvent.OutputTuple,
      WagerDepositEvent.OutputObject
    >;

    "WagerRequestCreation(bytes32,address,address,uint256)": TypedContractEvent<
      WagerRequestCreationEvent.InputTuple,
      WagerRequestCreationEvent.OutputTuple,
      WagerRequestCreationEvent.OutputObject
    >;
    WagerRequestCreation: TypedContractEvent<
      WagerRequestCreationEvent.InputTuple,
      WagerRequestCreationEvent.OutputTuple,
      WagerRequestCreationEvent.OutputObject
    >;

    "WagerWithdrawal(bytes32,uint256,address)": TypedContractEvent<
      WagerWithdrawalEvent.InputTuple,
      WagerWithdrawalEvent.OutputTuple,
      WagerWithdrawalEvent.OutputObject
    >;
    WagerWithdrawal: TypedContractEvent<
      WagerWithdrawalEvent.InputTuple,
      WagerWithdrawalEvent.OutputTuple,
      WagerWithdrawalEvent.OutputObject
    >;
  };
}
