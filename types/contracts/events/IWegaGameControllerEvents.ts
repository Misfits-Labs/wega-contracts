/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BytesLike, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IWegaGameControllerEventsInterface extends utils.Interface {
  functions: {};

  events: {
    "DenominatorSet(string,uint256,uint256)": EventFragment;
    "GameCreation(bytes32,address,string)": EventFragment;
    "GameRegistration(string,address)": EventFragment;
    "MinRoundsSet(string,uint256,uint256)": EventFragment;
    "RequiredPlayersSet(string,uint256,uint256)": EventFragment;
    "WinnerDeclaration(bytes32,address[])": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DenominatorSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameCreation"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GameRegistration"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MinRoundsSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequiredPlayersSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "WinnerDeclaration"): EventFragment;
}

export interface DenominatorSetEventObject {
  game: string;
  oldDenominator: BigNumber;
  newDenominator: BigNumber;
}
export type DenominatorSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DenominatorSetEventObject
>;

export type DenominatorSetEventFilter = TypedEventFilter<DenominatorSetEvent>;

export interface GameCreationEventObject {
  escrowHash: string;
  creator: string;
  name: string;
}
export type GameCreationEvent = TypedEvent<
  [string, string, string],
  GameCreationEventObject
>;

export type GameCreationEventFilter = TypedEventFilter<GameCreationEvent>;

export interface GameRegistrationEventObject {
  name: string;
  gameAddress: string;
}
export type GameRegistrationEvent = TypedEvent<
  [string, string],
  GameRegistrationEventObject
>;

export type GameRegistrationEventFilter =
  TypedEventFilter<GameRegistrationEvent>;

export interface MinRoundsSetEventObject {
  game: string;
  oldMinRounds: BigNumber;
  newMinRounds: BigNumber;
}
export type MinRoundsSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  MinRoundsSetEventObject
>;

export type MinRoundsSetEventFilter = TypedEventFilter<MinRoundsSetEvent>;

export interface RequiredPlayersSetEventObject {
  game: string;
  requiredPlayersOld: BigNumber;
  requiredPlayersNew: BigNumber;
}
export type RequiredPlayersSetEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  RequiredPlayersSetEventObject
>;

export type RequiredPlayersSetEventFilter =
  TypedEventFilter<RequiredPlayersSetEvent>;

export interface WinnerDeclarationEventObject {
  escrowHash: string;
  winners: string[];
}
export type WinnerDeclarationEvent = TypedEvent<
  [string, string[]],
  WinnerDeclarationEventObject
>;

export type WinnerDeclarationEventFilter =
  TypedEventFilter<WinnerDeclarationEvent>;

export interface IWegaGameControllerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWegaGameControllerEventsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "DenominatorSet(string,uint256,uint256)"(
      game?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): DenominatorSetEventFilter;
    DenominatorSet(
      game?: null,
      oldDenominator?: null,
      newDenominator?: null
    ): DenominatorSetEventFilter;

    "GameCreation(bytes32,address,string)"(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      creator?: null,
      name?: null
    ): GameCreationEventFilter;
    GameCreation(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      creator?: null,
      name?: null
    ): GameCreationEventFilter;

    "GameRegistration(string,address)"(
      name?: null,
      gameAddress?: null
    ): GameRegistrationEventFilter;
    GameRegistration(
      name?: null,
      gameAddress?: null
    ): GameRegistrationEventFilter;

    "MinRoundsSet(string,uint256,uint256)"(
      game?: null,
      oldMinRounds?: null,
      newMinRounds?: null
    ): MinRoundsSetEventFilter;
    MinRoundsSet(
      game?: null,
      oldMinRounds?: null,
      newMinRounds?: null
    ): MinRoundsSetEventFilter;

    "RequiredPlayersSet(string,uint256,uint256)"(
      game?: null,
      requiredPlayersOld?: null,
      requiredPlayersNew?: null
    ): RequiredPlayersSetEventFilter;
    RequiredPlayersSet(
      game?: null,
      requiredPlayersOld?: null,
      requiredPlayersNew?: null
    ): RequiredPlayersSetEventFilter;

    "WinnerDeclaration(bytes32,address[])"(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      winners?: PromiseOrValue<string>[] | null
    ): WinnerDeclarationEventFilter;
    WinnerDeclaration(
      escrowHash?: PromiseOrValue<BytesLike> | null,
      winners?: PromiseOrValue<string>[] | null
    ): WinnerDeclarationEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
