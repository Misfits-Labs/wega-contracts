/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../../common";

export interface IWegaGameControllerEventsInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic:
      | "GameCreation"
      | "GameRegistration"
      | "SetGame"
      | "WinnerDeclaration"
  ): EventFragment;
}

export namespace GameCreationEvent {
  export type InputTuple = [
    escrowHash: BytesLike,
    nonce: BigNumberish,
    creator: AddressLike,
    name: string
  ];
  export type OutputTuple = [
    escrowHash: string,
    nonce: bigint,
    creator: string,
    name: string
  ];
  export interface OutputObject {
    escrowHash: string;
    nonce: bigint;
    creator: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameRegistrationEvent {
  export type InputTuple = [name: string, gameAddress: AddressLike];
  export type OutputTuple = [name: string, gameAddress: string];
  export interface OutputObject {
    name: string;
    gameAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace SetGameEvent {
  export type InputTuple = [
    name: string,
    denominator: BigNumberish,
    minRounds: BigNumberish,
    requiredPlayers: BigNumberish,
    proxy: AddressLike,
    randomNumberController: AddressLike
  ];
  export type OutputTuple = [
    name: string,
    denominator: bigint,
    minRounds: bigint,
    requiredPlayers: bigint,
    proxy: string,
    randomNumberController: string
  ];
  export interface OutputObject {
    name: string;
    denominator: bigint;
    minRounds: bigint;
    requiredPlayers: bigint;
    proxy: string;
    randomNumberController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WinnerDeclarationEvent {
  export type InputTuple = [escrowHash: BytesLike, winners: AddressLike[]];
  export type OutputTuple = [escrowHash: string, winners: string[]];
  export interface OutputObject {
    escrowHash: string;
    winners: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface IWegaGameControllerEvents extends BaseContract {
  connect(runner?: ContractRunner | null): IWegaGameControllerEvents;
  waitForDeployment(): Promise<this>;

  interface: IWegaGameControllerEventsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "GameCreation"
  ): TypedContractEvent<
    GameCreationEvent.InputTuple,
    GameCreationEvent.OutputTuple,
    GameCreationEvent.OutputObject
  >;
  getEvent(
    key: "GameRegistration"
  ): TypedContractEvent<
    GameRegistrationEvent.InputTuple,
    GameRegistrationEvent.OutputTuple,
    GameRegistrationEvent.OutputObject
  >;
  getEvent(
    key: "SetGame"
  ): TypedContractEvent<
    SetGameEvent.InputTuple,
    SetGameEvent.OutputTuple,
    SetGameEvent.OutputObject
  >;
  getEvent(
    key: "WinnerDeclaration"
  ): TypedContractEvent<
    WinnerDeclarationEvent.InputTuple,
    WinnerDeclarationEvent.OutputTuple,
    WinnerDeclarationEvent.OutputObject
  >;

  filters: {
    "GameCreation(bytes32,uint256,address,string)": TypedContractEvent<
      GameCreationEvent.InputTuple,
      GameCreationEvent.OutputTuple,
      GameCreationEvent.OutputObject
    >;
    GameCreation: TypedContractEvent<
      GameCreationEvent.InputTuple,
      GameCreationEvent.OutputTuple,
      GameCreationEvent.OutputObject
    >;

    "GameRegistration(string,address)": TypedContractEvent<
      GameRegistrationEvent.InputTuple,
      GameRegistrationEvent.OutputTuple,
      GameRegistrationEvent.OutputObject
    >;
    GameRegistration: TypedContractEvent<
      GameRegistrationEvent.InputTuple,
      GameRegistrationEvent.OutputTuple,
      GameRegistrationEvent.OutputObject
    >;

    "SetGame(string,uint256,uint256,uint256,address,address)": TypedContractEvent<
      SetGameEvent.InputTuple,
      SetGameEvent.OutputTuple,
      SetGameEvent.OutputObject
    >;
    SetGame: TypedContractEvent<
      SetGameEvent.InputTuple,
      SetGameEvent.OutputTuple,
      SetGameEvent.OutputObject
    >;

    "WinnerDeclaration(bytes32,address[])": TypedContractEvent<
      WinnerDeclarationEvent.InputTuple,
      WinnerDeclarationEvent.OutputTuple,
      WinnerDeclarationEvent.OutputObject
    >;
    WinnerDeclaration: TypedContractEvent<
      WinnerDeclarationEvent.InputTuple,
      WinnerDeclarationEvent.OutputTuple,
      WinnerDeclarationEvent.OutputObject
    >;
  };
}
