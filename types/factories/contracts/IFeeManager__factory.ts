/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  IFeeManager,
  IFeeManagerInterface,
} from "../../contracts/IFeeManager";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "applier",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "transferAmount",
        type: "uint256",
      },
    ],
    name: "calculateFeesForTransfer",
    outputs: [
      {
        internalType: "address",
        name: "feeTaker",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "feeAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "sendAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "applier",
        type: "address",
      },
    ],
    name: "getFeeRule",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "applier",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeTaker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feeShare",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "shouldApply",
            type: "bool",
          },
        ],
        internalType: "struct IFeeManager.FeeConfig",
        name: "feeRule",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "applier",
            type: "address",
          },
          {
            internalType: "address",
            name: "feeTaker",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "feeShare",
            type: "uint256",
          },
          {
            internalType: "bool",
            name: "shouldApply",
            type: "bool",
          },
        ],
        internalType: "struct IFeeManager.FeeConfig[]",
        name: "configs",
        type: "tuple[]",
      },
    ],
    name: "setFeeConfigs",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "applier",
        type: "address",
      },
    ],
    name: "shouldApplyFees",
    outputs: [
      {
        internalType: "bool",
        name: "shouldApply",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class IFeeManager__factory {
  static readonly abi = _abi;
  static createInterface(): IFeeManagerInterface {
    return new Interface(_abi) as IFeeManagerInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): IFeeManager {
    return new Contract(address, _abi, runner) as unknown as IFeeManager;
  }
}
