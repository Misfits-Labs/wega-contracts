/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  WegaERC20Escrow,
  WegaERC20EscrowInterface,
} from "../../../contracts/escrow/WegaERC20Escrow";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "version",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "WegaEscrow_InvalidRequestData",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "bytes32",
        name: "escrowId",
        type: "bytes32",
      },
      {
        indexed: true,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "wager",
        type: "uint256",
      },
    ],
    name: "WagerRequestCreation",
    type: "event",
  },
  {
    inputs: [],
    name: "NAME",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "TYPE",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "accountsCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "wager",
        type: "uint256",
      },
    ],
    name: "createWagerAndDeposit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "currentNonce",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "escrowId",
        type: "bytes32",
      },
    ],
    name: "getWagerRequest",
    outputs: [
      {
        components: [
          {
            internalType: "enum IEscrow.TransactionState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "escrowId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "wager",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalWager",
            type: "uint256",
          },
        ],
        internalType: "struct IWegaERC20Escrow.ERC20WagerRequest",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getWagerRequests",
    outputs: [
      {
        components: [
          {
            internalType: "enum IEscrow.TransactionState",
            name: "state",
            type: "uint8",
          },
          {
            internalType: "bytes32",
            name: "escrowId",
            type: "bytes32",
          },
          {
            internalType: "uint256",
            name: "wager",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "token",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "nonce",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "totalWager",
            type: "uint256",
          },
        ],
        internalType: "struct IWegaERC20Escrow.ERC20WagerRequest[]",
        name: "",
        type: "tuple[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "creator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "accountsCount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "wager",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "nonce",
        type: "uint256",
      },
    ],
    name: "hash",
    outputs: [
      {
        internalType: "bytes32",
        name: "escrowId_",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "forwarder",
        type: "address",
      },
    ],
    name: "isTrustedForwarder",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60e0604052600b60a08190526a0544f4b454e2d45524332360ac1b60c09081526200002e916008919062000098565b503480156200003c57600080fd5b5060405162000da838038062000da88339810160408190526200005f916200020b565b600060805281516200007990600690602085019062000098565b5080516200008f90600790602084019062000098565b505050620002b2565b828054620000a69062000275565b90600052602060002090601f016020900481019282620000ca576000855562000115565b82601f10620000e557805160ff191683800117855562000115565b8280016001018555821562000115579182015b8281111562000115578251825591602001919060010190620000f8565b506200012392915062000127565b5090565b5b8082111562000123576000815560010162000128565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200016657600080fd5b81516001600160401b03808211156200018357620001836200013e565b604051601f8301601f19908116603f01168101908282118183101715620001ae57620001ae6200013e565b81604052838152602092508683858801011115620001cb57600080fd5b600091505b83821015620001ef5785820183015181830184015290820190620001d0565b83821115620002015760008385830101525b9695505050505050565b600080604083850312156200021f57600080fd5b82516001600160401b03808211156200023757600080fd5b620002458683870162000154565b935060208501519150808211156200025c57600080fd5b506200026b8582860162000154565b9150509250929050565b600181811c908216806200028a57607f821691505b60208210811415620002ac57634e487b7160e01b600052602260045260246000fd5b50919050565b608051610adb620002cd600039600060e30152610adb6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a3f4df7e11610066578063a3f4df7e14610138578063adb610a31461014d578063bb24fe8a14610155578063c589fd0c1461015d578063ffa1ad741461017d57600080fd5b80632753bb8d14610098578063343bb457146100be578063572b6c05146100d357806369a7e37614610123575b600080fd5b6100ab6100a63660046107ee565b610185565b6040519081526020015b60405180910390f35b6100d16100cc36600461083b565b6101e7565b005b6101136100e136600461087d565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0390811691161490565b60405190151581526020016100b5565b61012b610453565b6040516100b5919061090c565b61014061058f565b6040516100b5919061095a565b6100ab61061d565b610140610639565b61017061016b3660046109af565b610646565b6040516100b591906109c8565b6101406106d5565b6040516bffffffffffffffffffffffff19606087811b8216602084015286901b16603482015260488101849052606881018390526088810182905260009060a80160405160208183030381529060405280519060200120905095945050505050565b838383836001600160a01b038416158061020857506001600160a01b038316155b80610214575060018211155b8061021d575080155b1561023b5760405163a8b6e4e160e01b815260040160405180910390fd5b61024361079b565b600081526001600160a01b03891660608201526040810186905261026787876109ec565b60a082015261027461061d565b60808201526001600160a01b03881660009081526001602052604090208690556102a2600380546001019055565b60006102b982606001518a8a8a8660800151610185565b6020830181905290506102cd6004826106e2565b5060008181526020819052604090208251815484929190829060ff191660018360028111156102fe576102fe610898565b0217905550602082810151600183015560408084015160028085019190915560608501516003850180546001600160a01b0319166001600160a01b039092169190911790556080850151600485015560a09094015160059093019290925560008481529290529020610370908a6106f7565b5060608201516040516323b872dd60e01b81526001600160a01b038b81166004830152306024830152604482018a9052909116906323b872dd906064016020604051808303816000875af11580156103cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f09190610a0b565b50886001600160a01b031682606001516001600160a01b031683602001517f677510b0f69fc6b4c1fbc89daa2efbba5b1e18e382946e18ba2a8ff37a3cf6a68a60405161043f91815260200190565b60405180910390a450505050505050505050565b60606000610461600461070c565b905060008167ffffffffffffffff81111561047e5761047e610a34565b6040519080825280602002602001820160405280156104b757816020015b6104a461079b565b81526020019060019003908161049c5790505b50905060005b82811015610588576000806104d3600484610716565b815260208101919091526040908101600020815160c081019092528054829060ff16600281111561050657610506610898565b600281111561051757610517610898565b8152600182015460208201526002820154604082015260038201546001600160a01b031660608201526004820154608082015260059091015460a090910152825183908390811061056a5761056a610a4a565b6020026020010181905250808061058090610a60565b9150506104bd565b5092915050565b6006805461059c90610a7b565b80601f01602080910402602001604051908101604052809291908181526020018280546105c890610a7b565b80156106155780601f106105ea57610100808354040283529160200191610615565b820191906000526020600020905b8154815290600101906020018083116105f857829003601f168201915b505050505081565b6000610629600461070c565b610634906001610ab6565b905090565b6008805461059c90610a7b565b61064e61079b565b60008281526020819052604090819020815160c081019092528054829060ff16600281111561067f5761067f610898565b600281111561069057610690610898565b8152600182015460208201526002820154604082015260038201546001600160a01b031660608201526004820154608082015260059091015460a09091015292915050565b6007805461059c90610a7b565b60006106ee8383610722565b90505b92915050565b60006106ee836001600160a01b038416610722565b60006106f1825490565b60006106ee8383610771565b6000818152600183016020526040812054610769575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556106f1565b5060006106f1565b600082600001828154811061078857610788610a4a565b9060005260206000200154905092915050565b6040805160c08101909152806000815260006020820181905260408201819052606082018190526080820181905260a09091015290565b80356001600160a01b03811681146107e957600080fd5b919050565b600080600080600060a0868803121561080657600080fd5b61080f866107d2565b945061081d602087016107d2565b94979496505050506040830135926060810135926080909101359150565b6000806000806080858703121561085157600080fd5b61085a856107d2565b9350610868602086016107d2565b93969395505050506040820135916060013590565b60006020828403121561088f57600080fd5b6106ee826107d2565b634e487b7160e01b600052602160045260246000fd5b8051600381106108ce57634e487b7160e01b600052602160045260246000fd5b825260208181015190830152604080820151908301526060808201516001600160a01b0316908301526080808201519083015260a090810151910152565b6020808252825182820181905260009190848201906040850190845b8181101561094e5761093b8385516108ae565b9284019260c09290920191600101610928565b50909695505050505050565b600060208083528351808285015260005b818110156109875785810183015185820160400152820161096b565b81811115610999576000604083870101525b50601f01601f1916929092016040019392505050565b6000602082840312156109c157600080fd5b5035919050565b60c081016106f182846108ae565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615610a0657610a066109d6565b500290565b600060208284031215610a1d57600080fd5b81518015158114610a2d57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000600019821415610a7457610a746109d6565b5060010190565b600181811c90821680610a8f57607f821691505b60208210811415610ab057634e487b7160e01b600052602260045260246000fd5b50919050565b60008219821115610ac957610ac96109d6565b50019056fea164736f6c634300080b000a";

type WegaERC20EscrowConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: WegaERC20EscrowConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class WegaERC20Escrow__factory extends ContractFactory {
  constructor(...args: WegaERC20EscrowConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    name: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<WegaERC20Escrow> {
    return super.deploy(
      name,
      version,
      overrides || {}
    ) as Promise<WegaERC20Escrow>;
  }
  override getDeployTransaction(
    name: PromiseOrValue<string>,
    version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, version, overrides || {});
  }
  override attach(address: string): WegaERC20Escrow {
    return super.attach(address) as WegaERC20Escrow;
  }
  override connect(signer: Signer): WegaERC20Escrow__factory {
    return super.connect(signer) as WegaERC20Escrow__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): WegaERC20EscrowInterface {
    return new utils.Interface(_abi) as WegaERC20EscrowInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): WegaERC20Escrow {
    return new Contract(address, _abi, signerOrProvider) as WegaERC20Escrow;
  }
}
