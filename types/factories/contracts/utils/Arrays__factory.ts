/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Arrays, ArraysInterface } from "../../../contracts/utils/Arrays";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "findMax",
    outputs: [
      {
        internalType: "uint256",
        name: "max",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "hasDraw",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6102fe61003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100405760003560e01c806317baa68e146100455780638bd586821461006d575b600080fd5b6100586100533660046101c8565b61008e565b60405190151581526020015b60405180910390f35b61008061007b3660046101c8565b610145565b604051908152602001610064565b60008061009a83610145565b905060005b835181101561013b57818482815181106100bb576100bb610286565b60200260200101511061012957600184516100d691906102b2565b811461012957836100e88260016102c5565b815181106100f8576100f8610286565b602002602001015184828151811061011257610112610286565b602002602001015103610129575060019392505050565b80610133816102d8565b91505061009f565b5060009392505050565b6000805b82518110156101925761017e8284838151811061016857610168610286565b602002602001015161019890919063ffffffff16565b91508061018a816102d8565b915050610149565b50919050565b60008183116101a757816101a9565b825b90505b92915050565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156101db57600080fd5b823567ffffffffffffffff808211156101f357600080fd5b818501915085601f83011261020757600080fd5b813581811115610219576102196101b2565b8060051b604051601f19603f8301168101818110858211171561023e5761023e6101b2565b60405291825284820192508381018501918883111561025c57600080fd5b938501935b8285101561027a57843584529385019392850192610261565b98975050505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b818103818111156101ac576101ac61029c565b808201808211156101ac576101ac61029c565b6000600182016102ea576102ea61029c565b506001019056fea164736f6c6343000813000a";

type ArraysConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ArraysConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Arrays__factory extends ContractFactory {
  constructor(...args: ArraysConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Arrays> {
    return super.deploy(overrides || {}) as Promise<Arrays>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Arrays {
    return super.attach(address) as Arrays;
  }
  override connect(signer: Signer): Arrays__factory {
    return super.connect(signer) as Arrays__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ArraysInterface {
    return new utils.Interface(_abi) as ArraysInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Arrays {
    return new Contract(address, _abi, signerOrProvider) as Arrays;
  }
}
